#!/bin/sh
#
# Copyright (c) 2015 SUSE Linux GmbH
#
# This file is part of the kernel-ci project and licensed under the GNU GPLv2
#

DEFPROGRAMS=('sh' 'cat' 'chroot' 'echo' 'insmod' 'mount' 'sleep')
#MODULES=('efivarfs.ko' 'mcb.ko' 'mcb-pci.ko')

DEFROOT="/dev/vda3"
O=$(pwd)

#
# $1 program
copy_libs_for_prog()
{
	local prog libs
	prog=$1

	libs=$(ldd ${prog} | cut -d '>' -f 2 | cut -d ' ' -f 2 | grep ^/)
	for l in ${libs}; do
		cp $l lib64
	done
}

usage()
{
	echo "Usage: $1 [-f '<file[ <file>][...]'] [-i init] [-k kdir ] [-m '<module[ <module>][...]'] [-o <outdir>] [-r root]" >&2
	echo "" >&2
	echo "  -f Space separated list of files to include in initrd" >&2
	echo "     image." >&2
	echo "  -i bin/init source." >&2
	echo "  -k Directory having the kernel sources." >&2
	echo "  -m Space separated list of kernel modules to include" >&2
	echo "     in initrd image." >&2
	echo "  -p Space separated list of programs to include in" >&2
	echo "     initrd image." >&2
	echo "  -o <outdir> generate everything into <outdir>" >&2
	echo "  -r root= kernel option (default $DEFROOT)."  >&2
	exit 1
}

program=$(basename $0)
while getopts "f:i:h:k:m:p:o:r:?" flag; do
	case ${flag} in
		f)
			FILES=${OPTARG}
			;;
		i)
			INIT_SRC=${OPTARG}
			;;
		k)
			KDIR=${OPTARG}
			;;
		m)
			MODULES=${OPTARG}
			;;
		p)
			PROGRAMS=${OPTARG}
			;;
		o)
			O=${OPTARG}
			;;
		r)
			ROOT=${OPTARG}
			;;
		[?h])
			usage ${program}
			exit 1
			;;
		*)
			echo "invalid option"
			usage ${program}
			exit 1
			;;
	esac
done

if [ x"$ROOT" == "x" ]; then
	ROOT=$DEFROOT
fi

if [ x"$PROGRAMS" == "x" ]; then
	PROGRAMS=$DEFPROGRAMS
fi

rm -rf $O/initrd
mkdir -p $O/initrd/{bin,dev,etc,lib/modules,lib64,proc,sys,sysroot,root}
pushd $O/initrd >/dev/null
ln -s bin sbin

if [ x"$INIT_SRC" == "x" ]; then
	echo "#!/bin/sh" >> bin/init

	for mod in ${MODULES}; do
		echo "echo \"Loading ${mod}\"" >> bin/init
		echo "insmod /lib/modules/${mod}" >> bin/init
	done

	cat >> bin/init << __EOF__

echo "Mounting /proc, /dev and /sys"
mount -t proc /proc /proc
mount -t sysfs /sys /sys
mount -t devtmpfs /dev /dev

# Mount rootfs to /sysroot
mount -o ro $ROOT /sysroot

echo "Switching to new root"
cd /sysroot
exec chroot . sh -c 'exec /sbin/init'

__EOF__
else
	cp ${INIT_SRC} bin/init
fi

chmod 755 bin/init

if [ -x /usr/bin/busybox-static ]; then
	cp /usr/bin/busybox-static bin/busybox
	for prog in sh insmod mount echo chroot; do
		ln -s busybox "bin/$prog"
	done
else
	LD_2=`rpm -ql glibc | grep ld-2`
	LD_LINUX=`rpm -ql glibc | grep ld-linux`
	for lib in ${LD_2} ${LD_LINUX}; do
		cp ${lib} lib64/
	done

	for prog in ${PROGRAMS[@]}; do
		absprog=$(which ${prog})
		if [ -z ${absprog} ]; then
			echo "${prog} not found, skipping.."
			continue
		fi
		cp ${absprog} bin/
		copy_libs_for_prog ${absprog}
	done
fi

if [ x"$KDIR" != "x" ]; then
	readlink $KDIR
	LINK=$?
	if [ $LINK -eq 0 ]; then
		KDIR="$KDIR/"
	fi
	for mod in ${MODULES}; do
		find $KDIR -name "${mod}" | xargs cp -t lib/modules/
	done
fi

if [ "x$FILES" != "x" ]; then
	for file in ${FILES}; do
		cp ${file} root/
	done
fi

find ./ | cpio --quiet -H newc -o > ../initrd.cpio
popd >/dev/null

gzip -9 -c $O/initrd.cpio > $O/initrd.img

if [[ ! -d /lib/firmware/amd-ucode && ! -d /lib/firmware/intel-ucode ]]; then
	exit 0
fi

# microcode
TMPDIR=$(mktemp -qd)
UCODE_DIR=$TMPDIR/kernel/x86/microcode

mkdir -p $UCODE_DIR

if [ -d /lib/firmware/amd-ucode ]; then
	cat /lib/firmware/amd-ucode/microcode_amd*.bin > $UCODE_DIR/AuthenticAMD.bin
fi

if [ -d /lib/firmware/intel-ucode ]; then
	cat /lib/firmware/intel-ucode/* > $UCODE_DIR/GenuineIntel.bin
fi

cd $TMPDIR
find . | cpio --quiet -H newc -o > $O/microcode.cpio
cat $O/microcode.cpio $O/initrd.img > $O/initrd.microcode.img
mv -f $O/initrd.microcode.img $O/initrd.img

rm -rf $O/microcode.cpio
rm -rf $TMPDIR
