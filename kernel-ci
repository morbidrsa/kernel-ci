#!/bin/sh
#
# Copyright (c) 2015 SUSE Linux GmbH
#
# This file is part of the kernel-ci project and licensed under the GNU GPLv2
#

set -o nounset

SRC_ROOT=$(dirname ${BASH_SOURCE[0]})
source ${SRC_ROOT}/lib.sh

cleanup() 
{
	pr_debug "Cleaning up"
	rm -f $IMAGE
	rm -f $LOGFILE
	rm -rf initrd*
}

usage()
{
	echo "$(basename $0) [-d] [-a ARCH] -k <kerneldir> -i <master-image> [-r <root>]" >&2
	echo "  -a	Set QEMU architecture (default: x86_64)." >&2
	echo "  -d	Enable debug output." >&2
	echo "  -k	Directory from where to use the kernel." >&2
	echo "  -i	HDD image to use." >&2
	echo "  -r      root partition name." >&2
}

KERNELDIR=""
MODULES=(
	# storage
	virtio_pci.ko virtio_blk.ko sg.ko ahci.ko ata_piix.ko iscsi_ibft.ko
	loop.ko cdrom.ko
	# /, /boot and autofs4 needed by systemd
	btrfs.ko autofs4.ko vfat.ko nls_cp437.ko nls_iso8859_1.ko
	# network devices
	8139cp.ko 8139too.ko virtio_net.ko
	af_packet.ko serio_raw.ko
)
MASTER=""
IMAGE=""
ROOT=
ARCH=x86_64
TIMEOUT=180
LOGFILE=""
RC=1
SUCCESS_MARKER="login:"
DEBUG=""

trap cleanup EXIT

while getopts "a:dk:i:r:t:h?" opt; do
	case ${opt} in
		a)
			ARCH=$OPTARG
			;;
		d)
			DEBUG="-d"
			;;
		k)
			KERNELDIR=`realpath $OPTARG`
			;;
		i)
			MASTER=`realpath $OPTARG`
			;;
		r)
			ROOT=$OPTARG
			;;
		t)
			TIMEOUT=$OPTARG
			;;
		h)
			usage
			exit 1
			;;
	esac
done

# architecture description of qemu and kernel can be different
if [ "$ARCH" == "aarch64" ]; then
	KARCH="arm64"
	KIMG="Image"
else
	KARCH="$ARCH"
	KIMG="bzImage"
fi

if [ x"$KERNELDIR" == "x" ]; then
	pr_err "Kernel directory not set"
	echo ""
	usage
	exit 1
fi

IMAGE_OPTS=""
if [ x"$MASTER" != "x" ]; then
	IMAGE=$MASTER.$$
	IMAGE_OPTS="-r ${IMAGE}"
fi

LOGFILE=kernel-ci.$$.log
cp ${MASTER} ${IMAGE}
pr_debug "Using JeOS image ${IMAGE}"
pr_debug "Creating initrd"
${SRC_ROOT}/create-initrd -k ${KERNELDIR} ${ROOT:+-r $ROOT} -m "${MODULES[*]}" || exit 1
pr_debug "Lunching VM"
${SRC_ROOT}/vm -a ${ARCH} ${IMAGE_OPTS} ${ROOT:+-R $ROOT} ${DEBUG} \
	-k $KERNELDIR/arch/$KARCH/boot/$KIMG -i initrd.img \
	-t $TIMEOUT 2>&1 | tee $LOGFILE
if grep -e "$SUCCESS_MARKER" $LOGFILE; then
	echo "SUCCESS"
	RC=0
else
	echo "FAIL"
	tail -n 20 $LOGFILE
fi

exit $RC
